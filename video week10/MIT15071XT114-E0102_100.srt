0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:02,440
Let's look at how sports scheduling can

2
00:00:02,440 --> 00:00:07,000
be done with optimization by starting with a small example.

3
00:00:07,000 --> 00:00:10,060
Suppose we're trying to schedule a tournament between four

4
00:00:10,060 --> 00:00:15,390
teams-- Atlanta, Boston, Chicago, and Detroit.

5
00:00:15,390 --> 00:00:20,610
We'll call these teams A, B, C, and D.

6
00:00:20,610 --> 00:00:23,750
These teams are divided into two divisions.

7
00:00:23,750 --> 00:00:26,700
Atlanta and Boston are in one division,

8
00:00:26,700 --> 00:00:30,470
and Chicago and Detroit are in the second division.

9
00:00:30,470 --> 00:00:35,780
Each team plays one game a week for a total of four weeks.

10
00:00:35,780 --> 00:00:39,470
During the four weeks, each team plays the other team

11
00:00:39,470 --> 00:00:43,520
in the same division twice, and each team

12
00:00:43,520 --> 00:00:48,020
plays the teams in the other divisions once.

13
00:00:48,020 --> 00:00:50,880
The team with the most wins from each division

14
00:00:50,880 --> 00:00:53,650
will play in the championship game.

15
00:00:53,650 --> 00:00:59,060
For this reason, teams prefer to play divisional games later.

16
00:00:59,060 --> 00:01:03,280
If team A plays team C and D in the first two weeks

17
00:01:03,280 --> 00:01:08,350
and wins both games while team B also plays team C and D

18
00:01:08,350 --> 00:01:11,970
and loses both games, A knows that they only

19
00:01:11,970 --> 00:01:14,930
need to win one of the games against B

20
00:01:14,930 --> 00:01:18,115
to beat B in terms of wins and to go to the championship.

21
00:01:18,115 --> 00:01:21,130


22
00:01:21,130 --> 00:01:25,850
We can schedule this tournament by using an optimization model.

23
00:01:25,850 --> 00:01:30,150
Our objective is to maximize team preferences, which

24
00:01:30,150 --> 00:01:34,130
are that teams would like to play divisional games later.

25
00:01:34,130 --> 00:01:37,140
Our decisions are which teams should

26
00:01:37,140 --> 00:01:39,540
play each other each week.

27
00:01:39,540 --> 00:01:42,760
And we have three types of constraints.

28
00:01:42,760 --> 00:01:45,590
Each team needs to play the other team in their division

29
00:01:45,590 --> 00:01:49,770
twice, each team needs to play the teams in the other division

30
00:01:49,770 --> 00:01:55,760
once, and each team should play exactly one team each week.

31
00:01:55,760 --> 00:01:59,220
Let's start by discussing our decision variables.

32
00:01:59,220 --> 00:02:03,630
We need to decide which teams will play each other each week.

33
00:02:03,630 --> 00:02:06,790
To do this, let's define decision variables

34
00:02:06,790 --> 00:02:10,660
which we'll call x_ijk.

35
00:02:10,660 --> 00:02:15,650
If team i plays team j in week k,

36
00:02:15,650 --> 00:02:19,140
then x_ijk will be equal to 1.

37
00:02:19,140 --> 00:02:23,360
Otherwise, x_ijk equals 0.

38
00:02:23,360 --> 00:02:29,400
As an example, suppose team A plays team C in week 2.

39
00:02:29,400 --> 00:02:34,470
Then x_AC2 would equal 1.

40
00:02:34,470 --> 00:02:38,570
Since A only plays C once, we should have then

41
00:02:38,570 --> 00:02:45,160
that x_AC1, or A playing C in week 1, should be equal to 0.

42
00:02:45,160 --> 00:02:54,520
Similarly, x_AC3 should equal 0, and x_AC4 should equal 0.

43
00:02:54,520 --> 00:02:57,980
This is called a binary decision variable

44
00:02:57,980 --> 00:02:59,850
since it's a decision variable that

45
00:02:59,850 --> 00:03:03,000
can only take two values, 0 and 1.

46
00:03:03,000 --> 00:03:05,660


47
00:03:05,660 --> 00:03:08,050
This is a new type of decision variable,

48
00:03:08,050 --> 00:03:10,190
and it's what makes integer optimization

49
00:03:10,190 --> 00:03:13,040
different from linear optimization.

50
00:03:13,040 --> 00:03:16,440
The decision variables in integer optimization

51
00:03:16,440 --> 00:03:19,460
can only take integer values.

52
00:03:19,460 --> 00:03:22,520
This includes binary decision variables,

53
00:03:22,520 --> 00:03:27,480
like the ones we have here, that can only be either 0 or 1.

54
00:03:27,480 --> 00:03:29,850
These variables can model decisions

55
00:03:29,850 --> 00:03:32,010
like where to build a new warehouse,

56
00:03:32,010 --> 00:03:34,590
whether or not to invest in a stock,

57
00:03:34,590 --> 00:03:38,030
or assigning nurses to shifts.

58
00:03:38,030 --> 00:03:40,300
Integer optimization problems can also

59
00:03:40,300 --> 00:03:48,090
have integer decision variables that take values 1, 2, 3, 4, 5,

60
00:03:48,090 --> 00:03:49,530
etc.

61
00:03:49,530 --> 00:03:51,900
These variables can model decisions

62
00:03:51,900 --> 00:03:55,030
like the number of new machines to purchase,

63
00:03:55,030 --> 00:03:58,120
the number of workers to assign for a shift,

64
00:03:58,120 --> 00:04:01,830
and the number of items to stock in a store.

65
00:04:01,830 --> 00:04:04,920
Other than the new types of variables, integer optimization

66
00:04:04,920 --> 00:04:07,990
is exactly like linear optimization.

67
00:04:07,990 --> 00:04:11,920
But we'll see this week how integer optimization variables,

68
00:04:11,920 --> 00:04:15,515
and especially binary variables, can increase our modeling

69
00:04:15,515 --> 00:04:16,056
capabilities.

70
00:04:16,056 --> 00:04:18,790


71
00:04:18,790 --> 00:04:21,870
Now let's go back to our formulation.

72
00:04:21,870 --> 00:04:24,750
As we said before, our decisions are

73
00:04:24,750 --> 00:04:29,320
which teams should play each other each week.

74
00:04:29,320 --> 00:04:32,630
We'll model this with the binary decision variables

75
00:04:32,630 --> 00:04:37,010
we just discussed-- x_ijk which equal 1

76
00:04:37,010 --> 00:04:41,190
if team i plays team j in week k.

77
00:04:41,190 --> 00:04:43,630
Now let's use these decision variables

78
00:04:43,630 --> 00:04:45,770
to form our constraints.

79
00:04:45,770 --> 00:04:48,860
The first constraint is that each team

80
00:04:48,860 --> 00:04:52,380
should play the other team in their division twice.

81
00:04:52,380 --> 00:04:55,660
So teams A and B should play each other twice

82
00:04:55,660 --> 00:04:57,850
in the four weeks.

83
00:04:57,850 --> 00:05:05,100
This can be modeled with the constraint x_AB1 + x_AB2 +

84
00:05:05,100 --> 00:05:10,780
x_AB3 + x_AB4 = 2.

85
00:05:10,780 --> 00:05:13,640
This will force two of these decision variables

86
00:05:13,640 --> 00:05:17,150
to be equal to 1, and the other two decision variables

87
00:05:17,150 --> 00:05:19,030
to be equal to 0.

88
00:05:19,030 --> 00:05:22,890
The ones that are equal to 1 will correspond to the weeks

89
00:05:22,890 --> 00:05:25,310
that A and B will play each other.

90
00:05:25,310 --> 00:05:29,930
We'll have a similar constraint for teams C and D.

91
00:05:29,930 --> 00:05:32,860
Our next constraint is that each team

92
00:05:32,860 --> 00:05:36,270
should play the teams in the other division once.

93
00:05:36,270 --> 00:05:39,550
So teams A and C should play each other once

94
00:05:39,550 --> 00:05:42,000
in the four weeks.

95
00:05:42,000 --> 00:05:49,130
This can be modeled with a constraint x_AC1 + x_AC2 +

96
00:05:49,130 --> 00:05:55,040
x_AC3 + x_AC4 = 1.

97
00:05:55,040 --> 00:05:58,450
This is very similar to the previous constraint,

98
00:05:58,450 --> 00:06:01,650
except this time only one of the decision variables

99
00:06:01,650 --> 00:06:03,620
will have value 1.

100
00:06:03,620 --> 00:06:07,250
We'll have similar constraints for teams A and D,

101
00:06:07,250 --> 00:06:14,020
teams B and C, and teams B and D. Our last type of constraint

102
00:06:14,020 --> 00:06:16,720
is that each team should play exactly one

103
00:06:16,720 --> 00:06:18,780
other team each week.

104
00:06:18,780 --> 00:06:25,160
This means that A should play B, C or D in week 1.

105
00:06:25,160 --> 00:06:29,210
This can be modeled with a constraint x_AB1

106
00:06:29,210 --> 00:06:35,470
+ x_AC1 + x_AD1 = 1.

107
00:06:35,470 --> 00:06:39,710
Exactly one of these decision variables will be equal to 1,

108
00:06:39,710 --> 00:06:43,650
meaning that A will play that team in week 1.

109
00:06:43,650 --> 00:06:48,850
We'll have a similar constraint for every team and week pair.

110
00:06:48,850 --> 00:06:52,570
Now, let's model our objective.

111
00:06:52,570 --> 00:06:56,170
Let's assume that teams have a preference of 1

112
00:06:56,170 --> 00:07:01,080
for playing divisional games in week 1, a preference of 2

113
00:07:01,080 --> 00:07:05,790
for playing divisional games in week 2, a preference of 4

114
00:07:05,790 --> 00:07:10,060
for playing divisional games in week 3, and a preference of 8

115
00:07:10,060 --> 00:07:12,940
for playing divisional games in week 4.

116
00:07:12,940 --> 00:07:17,490
So the preference doubles with each later week.

117
00:07:17,490 --> 00:07:29,980
Then we can model our objective as x_AB1 + 2*x_AB2 + 4*x_AB3 +

118
00:07:29,980 --> 00:07:42,953
8*x_AB4 + x_CD1 + 2*x_CD2 + 4*x_CD3 + 8*x_CD4.

119
00:07:42,953 --> 00:07:46,150


120
00:07:46,150 --> 00:07:52,740
Then if team AB plays in week 3, we'll add 4 to our objective.

121
00:07:52,740 --> 00:07:55,110
If they play in week 1, then we'll

122
00:07:55,110 --> 00:07:57,870
only add 1 to our objective.

123
00:07:57,870 --> 00:08:01,270
If they don't play in a week, that term will be 0

124
00:08:01,270 --> 00:08:04,900
and will not contribute to the objective.

125
00:08:04,900 --> 00:08:06,780
Now that we've set up our problem,

126
00:08:06,780 --> 00:08:08,650
we're ready to solve it.

127
00:08:08,650 --> 00:08:11,750
In the next video, we'll set up and solve our problem

128
00:08:11,750 --> 00:08:13,295
in LibreOffice.

129
00:08:13,295 --> 00:08:13,794


