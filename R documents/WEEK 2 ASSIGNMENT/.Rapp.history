getwd()
load(url("http://bit.ly/dasi_gss_data"))
names(GSS)
names(dasi_gss_data)
names(gss)
str(income06)
str(gss$income06)
summary(gss$income06)
summary(gss$degreee)
summary(gss$degree)
hist(gss$income06)
hist(10,gss$income06)
barplot(gss$income06)
?barplot
?dim
dim(gss)
barplot(table(gss$income06))
?barplot
barplot(table(gss$income06),xlab="income")
plot(gss$income06,gss$degree)
plot(gss$income06,gss$degree,type="l")
plot(gss$degree,gss$income06,type="l")
gss$income06
summary(gss$income06)
barplot(table(gss$income06))
barplot(table(gss$degree))
summary(gss$degree)
?subset
gss
c(gss$income06,gss$degree)
table(gss$degree,gss$income06)
dataset=cbind(gss$degree,gss$income06)
dataset
tail(dataset)
tail(dataset,30)
wine=read.csv("wine.csv")
summary(wine)
model1=lm(Price~HarvestRain+WinterRain,data=wine)
summary(model1)
cor(wine$HarvestRain~wine$WinterRain)
corr(wine$HarvestRain~wine$WinterRain)
cor(wine$HarvestRain,wine$WinterRain)
model2=lm(HarvestRain~WinterRain,data=wine)
summary(model2)
lm(Price~HarvestRain+WinterRain,data=wine)
model5=lm(Price~HarvestRain+WinterRain,data=wine)
summary(model5)
data(state)#
#
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region
data(state)statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
str(statedata)
sort(tapply(statedata$HS.Grad,statedata$state.region,mean))
sort(tapply(statedata$HS.Grad,statedata$state.region,median))
boxplot(statedata$Murder ~ statedata$state.region)
sort(table(statedata$Murder,statedata$state.region))
table(statedata$Murder,statedata$state.region)
statedata$state.region
sub=subset(statedata$state.region==Northeast)
sub=subset(statedata$state.region=='Northeast')
sub=subset(statedata,state.region==Northeast)
sub=subset(statedata,state.region=Northeast)
which.max(sub$Murder)
sub$state.name[1]
sub
sub=subset(statedata,state.region="Northeast")
sub
sub=subset(statedata,state.region=="Northeast")
sub
names(statedata)
model1=lm(Life.Exp~Population+Income+Illiteracy+Murder+HS.Grad+Frost+Area)
model1=lm(Life.Exp~Population+Income+Illiteracy+Murder+HS.Grad+Frost+Area,data=statedata)
summary(model1)
model1=lm(Life.Exp~Population+Income+Illiteracy+Murder+HS.Grad+Frost,data=statedata)
summary(model1)
model1=lm(Life.Exp~Population+Income+Murder+HS.Grad+Frost,data=statedata)
summary(model1)
model1=lm(Life.Exp~Population+Murder+HS.Grad+Frost,data=statedata)
summary(model1)
model1
model1$Life.Exp
predict1=predict(model1,statedata)
sort(predict1)
which.min(statedata$Life.Exp)
state.name(40)
names(statedata)
statedata$state.name[40]
which.max(statedata$Life.Exp)
statedata$state.name[11]
predict1$residuals
model1$residuals
sort(abs(model1$residuals))
climate=read.csv("climate_change.csv")
str(climate)
training=subset(climate,Year<=2006)
heading(training)
head(training)
tail(training)
test=subset(climate,Year>2006)
tail(test)
names(training)
model1=lm(Temp~MEI+CO2+CH4+N2O+CFC.11+CFC.12)
model1=lm(Temp~MEI+CO2+CH4+N2O+CFC.11+CFC.12,data=training)
summary(model1)
model1=lm(Temp~MEI+CO2+CH4+N2O+CFC.11+CFC.12+TSI+Aerosols,data=training)
summary(model1)
cor(training)
model2=lm(Temp~MEI+N2O+TSI+Aerosols,data=training)
summary(model2)
model1=lm(Temp~MEI+CO2+CH4+N2O+CFC.11+CFC.12+TSI+Aerosols,data=training)
model3=step(model1)
summary(model3)
predict1=predict(model3,test)
summary(predict1)
SSE=sum((predict1-test$Temp)^2)
SST=sum((mean(test$Temp)-test$Temp)^2)
R2=1-SSE/SST
R2
SSE=sum((predict1-test$Temp)^2)
SST=sum((mean(training$Temp)-test$Temp)^2)
R2=1-SSE/SST
R2
training=read.csv("pisa2009training")
training=read.csv("pisa2009training.csv")
training=read.csv("pisa2009train.csv")
test=read.csv("pisa2009test.csv")
nrow(training)
tapply(training$male,training$grade,average)
tapply(training$male,training$grade,mean)
tapply(training$readingScore,training$male,mean)
summary(training)
pisaTrain = na.omit(Training)
pisaTrain = na.omit(training)
pisaTest = na.omit(test)
nrow(pisaTrain)
nrow(pisaTest)
table(pisaTrain$grade)
table(pisaTrain$male)
table(pisaTrain$raceeth)
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
lmScore=lm(readingScore ~ ,data=pisaTrain)
lmScore=lm(readingScore ~. ,data=pisaTrain)
summary(lmScore)
SSE=sum((lmScore-pisaTrain$readingScore)^2)
nrow(pisaTrain)
nrow(pisaTest)
lmScore2=predict(lmScore,pisaTrain)
SSE=sum((lmScore2-pisaTrain$readingScore)^2)
RMSE=1-sqrt(SSE/nrow(pisaTrain))
RMSE
RMSE=-RMSE-1
RMSE
RMSE=sqrt(SSE/nrow(pisaTrain))
RMSE
predTest=predict(ImScore,pisaTest)
predTest=predict(ImScore2,pisaTest)
predTest=predict(lmScore2,pisaTest)
predTest=predict(lmScore,pisaTest)
summary(predTest)
637.7-353.2
SSE=sum((preTest-pisaTest$readingScore)^2)
SSE=sum((predTest-pisaTest$readingScore)^2)
SSE
RMSE=sqrt(SSE/nrow(pisaTest))
RMSE
mean(pisaTrain$readingScore)
SST=sum((mean(pisaTrain$readingScore)-pisaTest$readingScore)^2)
SST
R2=1-SSE/SST
R2
FluTrain=read.csv("FluTrain.csv")
FluTrain=read.csv("FluTrain.csv")
names(FluTrain)
which.max(FluTrain$ILI)
FluTrain$Week[303]
which.max(FluTrain$Queries)
hist(FluTrain$ILI)
plot(FluTrain$Queries,log(FluTrain$ILI))
model1=lm(log(ILI)~Queries,data=FluTrain)
summary(model1)
cor(log(FluTrain$ILI),FluTrain$Queries)
corr=cor(log(FluTrain$ILI),FluTrain$Queries)
corr^2
FluTest=read.csv("FluTest.csv")
PredTest1 = exp(predict(Model1, newdata=FluTest))
PredTest1 = exp(predict(model1, newdata=FluTest))
PredTest1
names(FluTest)
FluTest$Week
(FluTest$Week[11]-PredTest[11])/FluTest$Week[11]
(FluTest$Week[11]-PredTest1[11])/FluTest$Week[11]
(FluTest$ILI[11]-PredTest1[11])/FluTest$ILI[11]
SSE=sum((PredTest1-FluTest)^2)
SSE=sum((PredTest1-FluTest$ILI)^2)
RMSE=sqrt(SSE/nrow(FluTest))
RMSE
install.packages("zoo")
library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
summary(ILILag2)
plot(log(ILILag2),log(FluTrain$ILI))
FluTrend2=lm(log(ILI)~log(ILILag2)+Queries,data=FluTrain)
summary(FluTrend2)
ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag2)
summary(ILILag2)
nrow(FluTrain)
FluTest$ILILag2[1] = FluTrain$ILI[416]
FluTest$ILILag2[2] = FluTrain$ILI[417]
FluTest$ILILag2[1]
FluTest$ILILag2[2]
Testpredictions=exp(predict(FluTrend2,newdata=FluTest))
summary(Testpredictions)
SSE=sum((testpredictions-FluTest$ILI)^2)
SSE=sum((Testpredictions-FluTest$ILI)^2)
RMSE=sqrt(SSE/nrow(FluTest))
RMSE
