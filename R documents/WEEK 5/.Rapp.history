str(Title)
str(Abstract)
sort(colSums(Abstract))
colnames(dtmTitle) = paste0("T", colnames(dtmTitle))
dtmTitle=Title
dtmAbstract=Abstract
colnames(dtmTitle) = paste0("T", colnames(dtmTitle))
colnames(dtmAbstract) = paste0("A", colnames(dtmAbstract))
dtm=cbind(dtmTitle,dtmAbstract)
dtm$trial=clinical$trial
str(dtm)
library(caTools)
set.seed(144)
split=sample.split(dtm$trial,0.7)
train=subset(dtm,split==TRUE)
test=subset(dtm,split==FALSE)
table(test)
table(test$trial)
313/(313+245)
library(rpart)
library(rpart.plot)
dtmCART=rpart(trial~.,data=dtm,method="class")
dtmCART=rpart(trial~.,data=train,method="class")
pred=predict(dtmCART,newdata=test,type="class")
table(test$trial,pred)
(261+162)/(261+162+52+83)
prp(dtmCART)
predprob=predict(dtmCART,newdata=test)
sort(predprob)
predprob
which.max(predprob[,2])
table(test$trial,pred)
(261+162)/(261+162+52+83)
pred2=predict(dtmCART,newdata=train,type="class")
table(train$trial,pred2)
(631+441)/(631+99+131+441)
441/(441+131)
(631)/(631)
(631)/(631+99)
library(ROCR)
predROCR=prediction(predprob,test$trial)
predROCR=prediction(predprob[,2],test$trial)
perfROCR=performance(predROCR,"tpr","frp")
perfROCR=performance(predROCR,"tpr","fpr")
performance(predROCR,"auc")@y.values
email=read.csv("emails.csv",stringsAsFactors=FALSE)
nrow(email)
table(email$spam)
names(email)
email$text[1]
sort(nchar(email$text))
which.min(nchar(email$text))
corpus=Corpus(VectorSource(email$text))
corpus=tm_map(corpus,tolower)
corpus=tm_map(corpus,removePunctuation)
corpus=tm_map(corpus,removeWords,stopwords("english"))
corpus=tm_map(corpus,stemDocument)
dtm=DocumentTermMatrix(corpus)
str(dtm)
dtm
spdtm=removeSparseTerms(dtm,0.95)
spdtm
emailsSparse=as.data.frame(as.matrix(spdtm))
colnames(emailsSparse)=make.names(colnames(emailsSparse))
sort(colSums(emialsSparse$text))
sort(colSums(emailsSparse$text))
sort(colSums(emailsSparse)
sort(colSums(emailsSparse))
emailsSparse$spam=email$spam
names(emailsSparse)
dataset=subset(emailsSparse,spam==0)
table(colSums(emialsSparse)>5000)
table(colSums(emailsSparse)>5000)
table(colSums(dataset)>5000)
dataset2=subset(emailsSparse,spam==1)
table(colSums(dataset2)>1000)
=
table(colSums(dataset2)>=1000)
table(dataset$spam)
table(dataset2@spam)
table(dataset2$spam)
sort(colSums(dataset2))
emailsSparse$spam = as.factor(emailsSparse$spam)
spamLog=glm(spam~.,data=emailsSparse,family=binomial)
spamCART=rpart(spam~.,data=emailsSparse,method="class")
set.seed(123)
split=sample.split(emailsSparse$spam,0.7)
train=subset(emailsSparse,split==TRUE)
test=subset(emailsSparse,split==FALSE)
spamLog=glm(spam~.,data=train,family=binomial)
spamCART=glm(spam~.,data=train,method="class")
spamCART=glm(spam~.,data=train,method=class)
spamCART=rpart(spam~.,data=train,method=class)
spamCART=rpart(spam~.,data=train,method="class")
library(randomForest)
spamRF=randomForest(spam~.,data=train)
library(randomForest)
set.seed(123)
spamRF=randomForest(spam~.,data=train)
predLog=predict(spamLog,newdata=train)
predCART=predict(spamCART,newdata=train)
predRF=predict(spamRF,newdata=train)
nrow(predLog<0.00001)
predLog
spamLog=glm(spam~.,data=train,method=binomial)
spamLog=glm(spam~.,data=train,method="binomial")
train$spam[1:5]
predLog=predict(spamLog,newdata=train,type="response")
predLog[1:5]
table(predLog<0.00001)
table(predLog>0.99999)
table(0.00001<=predLog<=0.99999)
nrow(predLog)-3046-954
nrow(predLog)
nrow(train)
summary(spamLog)
prp(spamCART)
table(train$spam,predLog>0.5)
(3052+954)/nrow(train)
library(ROCR)
predROCR=prediction(predLog,train$spam)
perfROCR=performance(predLog,"tpr","fpr")
perfROCR=performance(predROCR,"tpr","fpr")
performance(predROCR,"auc")@y.values
table(train$spam,predCART>0.5)
predCART
table(train$spam,predCART[,2]>0.5)
(2885+894)/nrow(train)
predROCR=prediction(predCART,train$spam)
predROCR=prediction(predCART[,2],train$spam)
performance(predROCR,"auc")@y.values
predRF
table(train$spam,predRF)
(3046+958)/nrow(train)
predROCR=prediction(predRF,train$spam)
predRF=predict(spamRF,newdata=train,type="prob")
predROCR=prediction(predRF[,2],train$spam)
performance(predROCR,"auc")@y.values
predLog2=predict(spamLog,newdata=test)
table(test$spam,predLog2)
predLog2=predict(spamLog,newdata=test,type="response")
table(test$spam,predLog2)
predLog2=predict(spamLog,newdata=test,type="response")
predLog2[1:5,]
predLog2[1:5]
table(test$spam,predLog2>0.5)
(1257+376)/nrow(test)
predROCR=prediction(predLog2,test$spam)
performance(predROCR,"auc")@y.values
predCART2=predict(spamCART,newdata=test)
table(test$spam,predCART2[,2]>0.5)
(1228+386)/nrow(test)
predROCR=prediction(predCART2,test$spam)
predROCR=prediction(predCART2[,2],test$spam)
performance(predROCR,"auc")@y.values
predRF2=predict(spamRF,newdata=test,type="prob")
predROCR=prediction(predRF2[,2],test$spam)
performance(predROCR,"auc")@y.values
table(test$spam,predRF2[,2]>0.5)
(1290+385)/nrow(test)
wordCount = rowSums(as.matrix(dtm))
wordCount
hist(wordCount)
hist(wordCount,bars=20)
hist(wordCount,break=20)
hist(wordCount,breaks=20)
hist(log(wordCount))
emailsSparse$logWordCount=log(wordCount)
boxplot(emailsSparse$logWordCount~emailsSparse$spam)
train2=subset(emailsSparse,split==TRUE)
test2=subset(emailsSparse,split==FALSE)
spam2CART=rpart(spam~.,data=train2,method="class")
set.seed(123)
spam2RF=randomForest(spam~.,data=train2)
pred2CART=predict(spam2CART,newdata=test,type="response")
pred2CART=predict(spam2CART,newdata=test,type="class")
pred2CART=predict(spam2CART,newdata=test)
spam2CART
prp(spam2CART)
test2$logWordCount[1:5]
pred2CART=predict(spam2CART,newdata=test2)
table(test2$spam,pred2CART[,2]>0.5)
(1214+384)/nrow(test2)
predROCR=prediction(pred2CART[,2],test2$spam)
performance(predROCR,"auc")@y.values
pred2RF=predict(spam2RF,newdata=test)
pred2RF=predict(spam2RF,newdata=test2)
pred2RF=predict(spam2RF,newdata=test2,type="prob")
table(test2$spam,pred2RF[,2])
table(test2$spam,pred2RF[,2]>0.5)
(1298+382)/nrow(test2)
predROCR=prediction(pred2RF[,2],test2$spam)
performance(predROCR,"auc")@y.values
library(RTextTools)
install.packages("RTextTools")
library(RTextTools)
dtm2gram = create_matrix(as.character(corpus), ngramLength=2)
dtm2gram
spdtm2gram=removeSparseTerms(dtm2gram,0.95)
spdtm2gram
emailsSparse2gram=as.data.frame(as.matrix(spdtm2gram))
colnames(emailsSparse2gram)=make.names(colnames(emailsSparse2gram))
emailsCombined = cbind(emailsSparse, emailsSparse2gram)
trainCombined=subset(emailsCombined,split==TRUE)
testCombined=subset(emailsCombined,split==FALSE)
spamCARTcombined=rpart(spam~.,data=trainCombined,method="class")
set.seed(123)
spamRFcombinde=randomForest(trainCombined,data=trainCombined)
spamRFcombinde=randomForest(trainCombined,data=trainCombined)
prp(spamCARTcombined,varlen=0)
predcombined=predict(spamCARTcombined,newdata=test)
predcombined=predict(spamCARTcombined,newdata=testCombined)
table(testCombined$spam,predcombined[,2]>0.5)
(1233+374)/nrow(testCombined)
predROCR=prediction(predcombined[,2],testCombined$spam)
performance(predROCR,"auc")@y.values
predcombined2=predict(spamRFcombinde,newdata=testCombined,type="prob")
predcombined2=predict(spamRFcombinde,newdata=testCombined)
spamRFcombined=randomForest(spam~.,data=trainCombined)
predcombined2=predict(spamRFcombined,newdata=testCombined,type="prob")
table(testCombined$spam,predcombined2[,2]>0.5)
(1297+385)/nrow(testCombined)
predROCR=prediction(predcombined2[,2],testCombined$spam)
performance(predROCR,"auc")@y.values
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)
tweets$Negative = as.factor(tweets$Avg <= -1)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, removePunctuation)
stopwords("english")[1:10]
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus = tm_map(corpus, stemDocument)
frequencies = DocumentTermMatrix(corpus)
sparse = removeSparseTerms(frequencies, 0.995)
tweetsSparse = as.data.frame(as.matrix(sparse))
colnames(tweetsSparse) = make.names(colnames(tweetsSparse))
tweetsSparse$Negative = tweets$Negative
set.seed(123)
split = sample.split(tweetsSparse$Negative, SplitRatio = 0.7)
trainSparse = subset(tweetsSparse, split==TRUE)
testSparse = subset(tweetsSparse, split==FALSE)
modellr=glm(Negative~.,data=trainSparse,method="class")
modellr=glm(Negative~.,data=trainSparse)
predictions = predict(modellr, newdata=testSparse, type="response")
modellr=glm(Negative~.,data=trainSparse,family=binomial)
predictions = predict(modellr, newdata=testSparse, type="response")
table(testSparse$Negative,predictions)
(253+32)/nrow(testSparse)
