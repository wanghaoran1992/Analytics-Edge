getwd()
load(url("http://bit.ly/dasi_gss_data"))
names(GSS)
names(dasi_gss_data)
names(gss)
str(income06)
str(gss$income06)
summary(gss$income06)
summary(gss$degreee)
summary(gss$degree)
hist(gss$income06)
hist(10,gss$income06)
barplot(gss$income06)
?barplot
?dim
dim(gss)
barplot(table(gss$income06))
?barplot
barplot(table(gss$income06),xlab="income")
plot(gss$income06,gss$degree)
plot(gss$income06,gss$degree,type="l")
plot(gss$degree,gss$income06,type="l")
gss$income06
summary(gss$income06)
barplot(table(gss$income06))
barplot(table(gss$degree))
summary(gss$degree)
?subset
gss
c(gss$income06,gss$degree)
table(gss$degree,gss$income06)
dataset=cbind(gss$degree,gss$income06)
dataset
tail(dataset)
tail(dataset,30)
pf(21,3,791,lower.tail=FALSE)
4.259048e-13
sqrt(3.4**2/18+2.7**2/18)
pt(0.5,df=17,lower.tail=FALSE)
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
census=read.csv("census.csv")
census=read.csv("census.csv")
set.seed(2000)
library(caTools)
set.seed(2000)
split=sample.split(census$over50k,data=train,family="binomial")
split=sample.split(census$over50k,SplitRatio=0.6)
train=subset(census,split=TRUE)
test=subset(census,split=FALSE)
glmmodel=glm(over50k~age+workclass+education+maritalstatus+occupation+relationship+race+sex+capitalgain+capitalloss+hoursperweek+nativecountry,data=train,family="binomial")
summary(glmmodel)
predictmod=predict(glmmodel,newdata=test)
table(test$over50k,predictmod)
table(test$over50k,predictmod>0.5)
table(test$over50k,predictmod>=0.5)
(23381+3690)/(23381+902+3690+4005)
table(test$over50k)
24283/(24283+7695)
library(ROCR)
predictmod=predict(glmmodel,newdata=test,type="response")
table(test$over50k,predictmod>0.5)
(22623+4644)/(22623+4644+1660+3051)
train=subset(census,split==TRUE)
set.seed(2000)
split=sample.split(census$over50k,SplitRatio=0.6)
train=subset(census,split==TRUE)
test=subset(census,split==FALSE)
glmodel=glm(over50k~.,data=train,family="binomial")
summary(glmodel)
predictmod=predict(glmmodel,newdata=test,type="response")
predictmod=predict(glmodel,newdata=test,type="response")
pred=prediction(predictmod,test$over50k)
perf=performance(pred,"auc"@y.values)
perf=performance(pred,"auc")@y.values
auc=as.numeric(perf)
auc
library(rpart)
classmodel=rpart(over50k~.,data=train,method="class")
prp(classmodel)
library(rpart.plot)
prp(classmodel)
cartpredict=predict(classmodel,newdata=test,type="class")
table(test$over50k,cartpredict)
(9243+1596)/nrow(test)
pred=prediction(cartpredict,test$over50k)
cartpredict=predict(classmodel,newdata=test)
cartpredict=predict(classmodel,newdata=test,type="class")
cartpredict2=predict(classmodel,newdata=test)
pred=prediction(cartpredict2,test$over50k)
pred=prediction(cartpredict[,2],test$over50k)
pred=prediction(cartpredict[:,2],test$over50k)
pred=prediction(cartpredict2[,2],test$over50k)
perf=performance(pred,"tpr","fpr")
as.numeric(performance(pred, "auc")@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
library(randomForest)
set.seed(1)
modelforest=randomForest(over50k~.-nativecountry,data=trainSmall)
predictforest=predict(modelforest,newdata=test)
table(test$over50k,predictforest)
(8861+2038)/nrow(test)
vu = varUsed(predictforest, count=TRUE)
vu = varUsed(modelforest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(MODEL$forest$xlevels[vusorted$ix]))
dotchart(vusorted$x, names(modelforest$forest$xlevels[vusorted$ix]))
varImpPlot(modelforest)
set.seed=2
fitcontrol=trainControl(method="cv",number=10)
library(caret)
library(e1071)
fitcontrol=trainControl(method="cv",number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
tr=train(over50k~.,data=train,method="rpart",trControl=fitControl,tuneGrid=cartGrid)
tr=train(over50k~.,data=train,method="rpart",trControl=fitcontrol,tuneGrid=cartGrid)
tr
model=tr$finalModel
predict1=predict(model,newdata=test,type="class")
model1=rpart(over50k~.,data=train,method="class",cp=0.002)
predict1=predict(model1,newdata=test,type="class")
table(test$over50k,predict1)
(9178+1838)/nrow(test)
prp(model1)
