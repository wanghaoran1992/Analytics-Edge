0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,480
We were able to solve our sports scheduling problem

2
00:00:03,480 --> 00:00:07,390
with 4 teams, 24 decision variables, and 22

3
00:00:07,390 --> 00:00:10,340
basic constraints pretty quickly.

4
00:00:10,340 --> 00:00:13,920
However, the problem size increases rapidly.

5
00:00:13,920 --> 00:00:16,520
The same problem with 10 teams would

6
00:00:16,520 --> 00:00:22,750
have 585 decision variables and 175 basic constraints.

7
00:00:22,750 --> 00:00:24,900
For scheduling Major League Baseball,

8
00:00:24,900 --> 00:00:27,560
the problem has 100,000 variables

9
00:00:27,560 --> 00:00:30,490
and 200,000 constraints.

10
00:00:30,490 --> 00:00:33,750
For small problems, spreadsheet softwares like LibreOffice

11
00:00:33,750 --> 00:00:34,600
are great.

12
00:00:34,600 --> 00:00:36,960
But for large problems like this,

13
00:00:36,960 --> 00:00:40,310
solving them in LibreOffice would be impossible.

14
00:00:40,310 --> 00:00:43,030
So how are integer optimization models like this

15
00:00:43,030 --> 00:00:45,720
solved in practice?

16
00:00:45,720 --> 00:00:48,560
Many different tricks are used to solve large integer

17
00:00:48,560 --> 00:00:50,360
optimization problems.

18
00:00:50,360 --> 00:00:53,620
One is to reformulate the problem.

19
00:00:53,620 --> 00:00:56,220
The sports scheduling problem with more teams

20
00:00:56,220 --> 00:01:00,020
is often solved by changing the formulation.

21
00:01:00,020 --> 00:01:03,360
Instead of the variables we discussed in this lecture,

22
00:01:03,360 --> 00:01:07,030
the decision variables are sequences of games.

23
00:01:07,030 --> 00:01:10,490
Additionally, the problem can be split into three smaller

24
00:01:10,490 --> 00:01:14,420
problems that can each be solved separately and much faster

25
00:01:14,420 --> 00:01:17,230
than just solving the whole problem.

26
00:01:17,230 --> 00:01:19,250
Another trick that's often used is

27
00:01:19,250 --> 00:01:21,790
what's called heuristic methods.

28
00:01:21,790 --> 00:01:26,790
These methods find good, but not necessarily optimal, decisions.

29
00:01:26,790 --> 00:01:29,060
A good decision is sometimes accepted

30
00:01:29,060 --> 00:01:30,840
since the problem is so much easier

31
00:01:30,840 --> 00:01:35,550
to solve using the heuristic method.

32
00:01:35,550 --> 00:01:37,280
In addition to changing the formulation

33
00:01:37,280 --> 00:01:41,200
and using heuristics, there are general-purpose optimization

34
00:01:41,200 --> 00:01:44,080
solvers that can solve large problems.

35
00:01:44,080 --> 00:01:50,210
These include CPLEX, Gurobi, GLPK, and COIN-OR.

36
00:01:50,210 --> 00:01:53,940
Most practitioners who solve large optimization problems

37
00:01:53,940 --> 00:01:57,680
use one of these software packages.

38
00:01:57,680 --> 00:02:02,590
In the past 20 years, the speed of integer optimization solvers

39
00:02:02,590 --> 00:02:07,660
has increased by a factor of 250,000, which doesn't even

40
00:02:07,660 --> 00:02:10,960
include the increasing speed of computers.

41
00:02:10,960 --> 00:02:14,520
This means that a problem that could be solved in one second

42
00:02:14,520 --> 00:02:18,350
today took seven years to solve 20 years ago --

43
00:02:18,350 --> 00:02:20,440
on the same computer.

44
00:02:20,440 --> 00:02:22,490
Because of this increase in speed,

45
00:02:22,490 --> 00:02:25,420
we're able to solve much larger and more complicated

46
00:02:25,420 --> 00:02:30,560
optimization problems today than just a few years ago.

47
00:02:30,560 --> 00:02:33,260
So how about the sports scheduling problem?

48
00:02:33,260 --> 00:02:37,230
When the Sports Scheduling Group was started in 1996,

49
00:02:37,230 --> 00:02:41,460
integer optimization software was too slow to be useful.

50
00:02:41,460 --> 00:02:43,740
Now, they can use powerful solvers

51
00:02:43,740 --> 00:02:46,200
to generate sports schedules.

52
00:02:46,200 --> 00:02:48,180
Even with these solvers, it takes

53
00:02:48,180 --> 00:02:51,530
months to make the Major League Baseball schedule.

54
00:02:51,530 --> 00:02:55,010
This is due to several reasons, including the enormous list

55
00:02:55,010 --> 00:02:56,690
of ever-changing constraints that they

56
00:02:56,690 --> 00:02:59,890
have to account for, the need to define priorities

57
00:02:59,890 --> 00:03:02,110
on the constraints to even find a feasible

58
00:03:02,110 --> 00:03:06,010
solution, and the fact that it takes several iterations to get

59
00:03:06,010 --> 00:03:07,990
a good schedule.

60
00:03:07,990 --> 00:03:10,550
But even with these challenges, analytics

61
00:03:10,550 --> 00:03:14,120
offers a significant edge in sports scheduling.

62
00:03:14,120 --> 00:03:16,730
The use of optimization allows for the addition

63
00:03:16,730 --> 00:03:19,920
of new constraints or schedule changes.

64
00:03:19,920 --> 00:03:22,530
A new schedule can easily be generated

65
00:03:22,530 --> 00:03:25,960
based on an updated requirement or request.

66
00:03:25,960 --> 00:03:29,260
Now, all professional sports and most college sports

67
00:03:29,260 --> 00:03:32,560
construct their schedules using optimization.

68
00:03:32,560 --> 00:03:35,920
In this lecture, we've seen one powerful use of integer

69
00:03:35,920 --> 00:03:38,980
optimization, but this method has a huge number

70
00:03:38,980 --> 00:03:40,850
of applications, which you'll see

71
00:03:40,850 --> 00:03:44,060
more of in the second lecture, the recitation,

72
00:03:44,060 --> 00:03:46,320
and in the homework assignment.

